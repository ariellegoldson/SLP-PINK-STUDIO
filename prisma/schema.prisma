// Prisma schema file
// Generated for SLP Pink Studio using SQLite database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Teacher {
  id         Int         @id @default(autoincrement())
  name       String
  classrooms Classroom[]
  students   Student[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Classroom {
  id        Int       @id @default(autoincrement())
  name      String
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  teacherId Int
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Student {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  dateOfBirth DateTime
  grade       String
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  teacherId   Int
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId Int
  goals       StudentGoal[]
  notes       Note[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TargetArea {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  goals     Goal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id           Int        @id @default(autoincrement())
  targetArea   TargetArea @relation(fields: [targetAreaId], references: [id])
  targetAreaId Int
  description  String
  studentGoals StudentGoal[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model StudentGoal {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  goal      Goal    @relation(fields: [goalId], references: [id])
  goalId    Int
  status    String
  notes     String?
  goalData  NoteGoalData[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Session {
  id        Int      @id @default(autoincrement())
  date      DateTime
  startTime DateTime
  endTime   DateTime
  location  String
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   Int?
  notes     Note[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id        Int      @id @default(autoincrement())
  session   Session  @relation(fields: [sessionId], references: [id])
  sessionId Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  text      String
  location  String?
  activity  String?
  prompting String?
  comments  String?
  goalData  NoteGoalData[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NoteGoalData {
  id            Int         @id @default(autoincrement())
  note          Note        @relation(fields: [noteId], references: [id])
  noteId        Int
  studentGoal   StudentGoal @relation(fields: [studentGoalId], references: [id])
  studentGoalId Int
  accuracy      Int
  trials        Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

